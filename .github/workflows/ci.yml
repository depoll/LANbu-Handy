name: CI

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

jobs:
  lint-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Get Bambu Studio CLI version
        id: bambu-version
        run: |
          if [ -f "scripts/bambu-studio-version.txt" ]; then
            version=$(cat scripts/bambu-studio-version.txt | tr -d '[:space:]')
          else
            version="latest"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Bambu Studio CLI version: $version"

      - name: Cache Bambu Studio CLI
        id: cache-bambu-cli
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/BambuStudio.AppImage
            /usr/local/bin/bambu-studio-cli
            /usr/local/bin/bambu-studio
          key: bambu-cli-${{ steps.bambu-version.outputs.version }}-${{ runner.os }}
          restore-keys: |
            bambu-cli-${{ steps.bambu-version.outputs.version }}-

      - name: Install Bambu Studio CLI and dependencies
        if: steps.cache-bambu-cli.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/install-bambu-studio-cli.sh
          scripts/install-bambu-studio-cli.sh

      - name: Verify cached Bambu Studio CLI
        if: steps.cache-bambu-cli.outputs.cache-hit == 'true'
        run: |
          echo "Using cached Bambu Studio CLI"
          echo "Verifying cached files exist:"
          ls -la /usr/local/bin/BambuStudio.AppImage || echo "AppImage not found"
          ls -la /usr/local/bin/bambu-studio-cli || echo "CLI wrapper not found"
          ls -la /usr/local/bin/bambu-studio || echo "CLI symlink not found"

          # Ensure proper permissions on cached files
          if [ -f "/usr/local/bin/BambuStudio.AppImage" ]; then
            sudo chmod +x /usr/local/bin/BambuStudio.AppImage
          fi
          if [ -f "/usr/local/bin/bambu-studio-cli" ]; then
            sudo chmod +x /usr/local/bin/bambu-studio-cli
          fi

      - name: Install dependencies for cached CLI
        if: steps.cache-bambu-cli.outputs.cache-hit == 'true'
        run: |
          echo "Installing system dependencies for cached CLI"
          chmod +x scripts/install-bambu-studio-cli.sh
          scripts/install-bambu-studio-cli.sh --deps-only

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python formatter (Black) check
        run: |
          cd backend
          python -m black --check --config ../pyproject.toml .

      - name: Run Python import sorting (isort) check
        run: |
          cd backend
          python -m isort --profile black --check-only .

      - name: Run Python linter (flake8)
        run: |
          python -m flake8 backend/

      - name: Verify Bambu Studio CLI installation
        run: |
          bambu-studio-cli --help || echo "CLI help command failed, but CLI may still be functional"
          bambu-studio-cli --version || echo "CLI version command failed, but CLI may still be functional"

      - name: Run backend tests
        run: |
          cd backend
          # Set up virtual display for headless environment
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          # Run tests with verbose output and coverage
          python -m pytest tests/ -v --cov=app --cov-report=term-missing -s

      - name: Set up Node.js for PWA
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'pwa/package-lock.json'

      - name: Install PWA dependencies and build
        run: |
          cd pwa
          npm install

      - name: Run JavaScript/TypeScript formatter (Prettier) check
        run: |
          cd pwa
          npx prettier --check .

      - name: Run JavaScript/TypeScript linter (ESLint)
        run: |
          cd pwa
          npm run lint

      - name: Build PWA
        run: |
          cd pwa
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: lanbu-handy:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-docker:
    runs-on: ubuntu-latest
    needs: lint-and-build
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=head,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
