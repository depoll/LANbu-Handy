name: CI

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: [self-hosted, arm64]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Set up Docker Buildx for CLI
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python formatter (Black) check
        run: |
          cd backend
          python -m black --check --config ../pyproject.toml .

      - name: Run Python import sorting (isort) check
        run: |
          cd backend
          python -m isort --profile black --check-only .

      - name: Run Python linter (flake8)
        run: |
          python -m flake8 backend/

      - name: Set lowercase repository name
        id: repo
        run: |
          echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Run backend tests with pre-built CLI
        run: |
          # Use the pre-built CLI image from GHCR for the specific platform
          docker run --rm --platform=${{ matrix.platform }} \
            -v $(pwd)/backend:/app/backend \
            -v $(pwd)/test_files:/app/test_files \
            -w /app/backend \
            --entrypoint="" \
            ghcr.io/${{ steps.repo.outputs.name }}/bambu-studio-cli:latest \
            bash -c "
              # Install Python and test dependencies
              apt-get update && apt-get install -y python3 python3-pip python3-venv xvfb
              python3 -m pip install --upgrade pip
              python3 -m pip install -r requirements.txt

              # Set up virtual display for headless environment
              export DISPLAY=:99
              export QT_QPA_PLATFORM=offscreen
              Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

              # Run tests with verbose output and coverage
              python3 -m pytest tests/ -v --cov=app --cov-report=term-missing -s
            "

      - name: Set up Node.js for PWA
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'pwa/package-lock.json'

      - name: Install PWA dependencies and build
        run: |
          cd pwa
          npm install

      - name: Run JavaScript/TypeScript formatter (Prettier) check
        run: |
          cd pwa
          npx prettier --check .

      - name: Run JavaScript/TypeScript linter (ESLint)
        run: |
          cd pwa
          npm run lint

      - name: Build PWA
        run: |
          cd pwa
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: lanbu-handy:latest
          cache-from: type=gha,key=buildx-${{ matrix.platform }}
          cache-to: type=gha,mode=max,key=buildx-${{ matrix.platform }}

  build-docker-images:
    runs-on: ${{ matrix.runner }}
    needs: lint-and-test
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            arch: arm64
            runner: [self-hosted, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        id: repo
        run: |
          echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.name }}
          tags: |
            type=ref,event=tag,suffix=-${{ matrix.arch }}
            type=raw,value=latest-${{ matrix.arch }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=head-${{ matrix.arch }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,key=buildx-${{ matrix.platform }}
          cache-to: type=gha,mode=max,key=buildx-${{ matrix.platform }}

  publish-multi-arch-manifest:
    runs-on: ubuntu-latest
    needs: build-docker-images
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') && !cancelled() && !failure()

    steps:
      - name: Set lowercase repository name
        id: repo
        run: |
          echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifests
        run: |
          REPO="ghcr.io/${{ steps.repo.outputs.name }}"

          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # For version tags
            VERSION="${{ github.ref_name }}"
            docker buildx imagetools create -t ${REPO}:${VERSION} \
              ${REPO}:${VERSION}-amd64 \
              ${REPO}:${VERSION}-arm64

            # Also create latest tag for version releases
            docker buildx imagetools create -t ${REPO}:latest \
              ${REPO}:latest-amd64 \
              ${REPO}:latest-arm64
          else
            # For main branch (head)
            docker buildx imagetools create -t ${REPO}:head \
              ${REPO}:head-amd64 \
              ${REPO}:head-arm64
          fi
