# GitHub Copilot Workspace Setup Steps for LANbu Handy
# This file initializes the development environment with all required dependencies
# for working on the LANbu Handy PWA and backend services.

name: "Copilot Setup Steps"

# Allow testing of the setup steps from your repository's "Actions" tab.
"on": workflow_dispatch

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python with cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
          
      - name: Set up Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'pwa/package-lock.json'
      - name: Install backend dependencies  
        run: |
          # Install core backend dependencies
          cd backend
          pip install -r requirements.txt
          
          # Install additional development and testing tools
          pip install flake8 black mypy isort pytest-asyncio httpx requests
          
          echo "‚úÖ Backend dependencies installed"

      - name: Install and setup pre-commit
        run: |
          # Install pre-commit framework if not already available
          if ! command -v pre-commit > /dev/null 2>&1; then
            echo "üì¶ Installing pre-commit framework..."
            pip install pre-commit
          else
            echo "‚úÖ Pre-commit framework already available"
          fi
          
          # Install pre-commit hooks for the repository
          echo "üîß Installing pre-commit git hooks..."
          pre-commit install
          
          # Try to install hook environments (may fail due to network issues in CI)
          echo "üìã Attempting to install pre-commit hook environments..."
          if timeout 180 pre-commit install --install-hooks 2>/dev/null; then
            echo "‚úÖ Pre-commit hook environments installed successfully"
          else
            echo "‚ö†Ô∏è  Hook environment installation timed out or failed (likely network issues)"
            echo "‚úÖ Pre-commit git hooks are installed and will work for local development"
          fi
          
          echo "‚úÖ Pre-commit setup complete"

      - name: Install PWA dependencies
        run: |
          # Install PWA dependencies
          cd pwa
          npm install
          
          echo "‚úÖ PWA dependencies installed"

      - name: Install Bambu Studio CLI
        run: |
          # Make installation script executable
          chmod +x scripts/install-bambu-studio-cli.sh
          
          # Install Bambu Studio CLI with all dependencies
          scripts/install-bambu-studio-cli.sh
          
          echo "‚úÖ Bambu Studio CLI installed"

      - name: Verify installations
        run: |
          echo "üß™ Validating development environment..."
          
          # Test Python environment
          echo "Testing Python environment..."
          python3 -c "import fastapi, uvicorn, pytest; print('‚úÖ Core Python packages available')" || echo "‚ùå Some core Python packages missing"
          
          # Test linting tools
          echo "Testing Python linting tools..."
          python3 -c "import flake8, black, mypy, isort; print('‚úÖ Python linting tools available')" || echo "‚ùå Some Python linting tools missing"
          
          # Test Node.js environment
          echo "Testing Node.js environment..."
          (cd pwa && npm list react react-dom typescript vite > /dev/null 2>&1 && echo "‚úÖ Core PWA packages available") || echo "‚ùå Some PWA packages missing"
          
          # Test Bambu Studio CLI (if available)
          echo "Testing Bambu Studio CLI..."
          if command -v bambu-studio-cli > /dev/null 2>&1; then
            echo "‚úÖ Bambu Studio CLI available in PATH"
            timeout 10 bambu-studio-cli --help > /dev/null 2>&1 && echo "‚úÖ CLI help command works" || echo "‚ö†Ô∏è  CLI help command failed (expected in headless environments)"
          else
            echo "‚ö†Ô∏è  Bambu Studio CLI not in PATH (this is expected if installation failed)"
          fi
          
          echo "üéâ Development environment validation complete!"

      - name: Validate code formatting and linting
        run: |
          echo "üîç Running pre-commit checks on all files..."
          echo "This ensures all code in the workspace passes formatting and linting standards."
          echo ""
          
          # Try to run pre-commit on all files - handle network issues gracefully
          if timeout 300 pre-commit run --all-files 2>&1; then
            echo ""
            echo "‚úÖ All pre-commit checks passed!"
            echo "The workspace code meets all formatting and linting standards."
          else
            PRECOMMIT_EXIT_CODE=$?
            echo ""
            if [ $PRECOMMIT_EXIT_CODE -eq 124 ]; then
              echo "‚ö†Ô∏è  Pre-commit checks timed out (likely due to network issues downloading hooks)"
              echo "This is acceptable during initial setup - hooks will be available for local development."
              echo "‚úÖ Pre-commit framework is properly configured."
            else
              echo "‚ùå Pre-commit checks failed!"
              echo "The workspace contains code that doesn't meet formatting or linting standards."
              echo "This setup has been configured to fail if pre-commit errors exist."
              echo ""
              echo "üí° To fix these issues:"
              echo "  ‚Ä¢ Run 'pre-commit run --all-files' locally to see and fix all issues"
              echo "  ‚Ä¢ Or run specific formatters: 'python -m black backend/' and 'cd pwa && npm run format'"
              echo "  ‚Ä¢ Commit the fixes and restart this Copilot Workspace setup"
              echo ""
              exit 1
            fi
          fi

      - name: Setup headless display
        run: |
          # Install Xvfb if not available and we're on Linux
          if [ "$(uname)" = "Linux" ]; then
            # Check if Xvfb is available, install if needed
            if ! command -v Xvfb > /dev/null 2>&1; then
              echo "Installing Xvfb for headless testing..."
              if command -v apt-get > /dev/null 2>&1; then
                sudo apt-get update && sudo apt-get install -y xvfb
              elif command -v yum > /dev/null 2>&1; then
                sudo yum install -y xorg-x11-server-Xvfb
              else
                echo "‚ö†Ô∏è  Could not install Xvfb automatically"
              fi
            fi
            
            # Start virtual display for testing
            export DISPLAY=:99
            Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            echo "‚úÖ Virtual display configured"
          else
            echo "‚ÑπÔ∏è  Virtual display setup skipped (not Linux)"
          fi

      - name: Environment summary
        run: |
          echo ""
          echo "üöÄ LANbu Handy Development Environment Ready!"
          echo "=============================================="
          echo ""
          echo "üì¶ Installed Components:"
          echo "  ‚Ä¢ Python $(python3 --version | cut -d' ' -f2) with FastAPI backend dependencies"
          echo "  ‚Ä¢ Node.js $(node --version) with React PWA dependencies"
          echo "  ‚Ä¢ Development tools: flake8, black, mypy, isort, ESLint, TypeScript"
          echo "  ‚Ä¢ Testing tools: pytest, Jest/Vitest ready"
          if command -v bambu-studio-cli > /dev/null 2>&1; then
            echo "  ‚Ä¢ Bambu Studio CLI for 3D model slicing"
          else
            echo "  ‚Ä¢ Bambu Studio CLI (installation may require system dependencies)"
          fi
          echo "  ‚Ä¢ Pre-commit hooks with automatic code formatting and linting"
          if [ "$(uname)" = "Linux" ]; then
            echo "  ‚Ä¢ Xvfb virtual display for headless testing"
          fi
          echo ""
          echo "üîí Code Quality Enforcement:"
          echo "  ‚Ä¢ Pre-commit hooks are ENFORCED by default for all contributors"
          echo "  ‚Ä¢ All code must pass pre-commit checks before submission"
          echo "  ‚Ä¢ Hooks run automatically on commit and include:"
          echo "    - Python: Black formatting, isort imports, flake8 linting"
          echo "    - Frontend: Prettier formatting, ESLint linting"
          echo "    - General: Trailing whitespace, file endings, YAML/JSON validation"
          echo "  ‚Ä¢ To run checks manually: 'pre-commit run --all-files'"
          echo "  ‚Ä¢ To bypass temporarily (NOT recommended): 'git commit --no-verify'"
          echo ""
          echo "üõ†Ô∏è  Quick Start Commands:"
          echo "  Backend development:"
          echo "    cd backend && uvicorn app.main:app --reload --host 0.0.0.0"
          echo "  PWA development:"
          echo "    cd pwa && npm run dev"
          echo "  Run tests:"
          echo "    cd backend && python -m pytest tests/ -v"
          echo "  Lint code:"
          echo "    python -m flake8 backend/ && cd pwa && npm run lint"
          echo "  Format code:"
          echo "    pre-commit run --all-files"
          echo ""
          echo "üìö See .devcontainer/README.md and scripts/README.md for more details"