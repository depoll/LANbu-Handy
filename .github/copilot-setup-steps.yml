# GitHub Copilot Workspace Setup Steps for LANbu Handy
# This file initializes the development environment with all required dependencies
# for working on the LANbu Handy PWA and backend services.

name: Setup LANbu Handy Development Environment

steps:
  # Step 1: Setup Python environment
  - name: Setup Python environment
    description: Install Python 3.12 and ensure pip is available
    run: |
      # Ensure Python 3.12 is available
      python3 --version
      
      # Upgrade pip to latest version
      python3 -m pip install --upgrade pip
      
      echo "‚úÖ Python environment ready"

  # Step 2: Install backend dependencies
  - name: Install backend dependencies  
    description: Install FastAPI, testing tools, and Python development dependencies
    run: |
      # Install core backend dependencies
      cd backend
      pip install -r requirements.txt
      
      # Install additional development and testing tools
      pip install flake8 black mypy isort pytest-asyncio httpx requests
      
      echo "‚úÖ Backend dependencies installed"

  # Step 3: Setup Node.js environment
  - name: Setup Node.js environment
    description: Ensure Node.js 20+ and npm are available
    run: |
      # Verify Node.js version (should be 20+)
      node --version
      npm --version
      
      echo "‚úÖ Node.js environment ready"

  # Step 4: Install PWA dependencies
  - name: Install PWA dependencies
    description: Install React, TypeScript, Vite and development tools
    run: |
      # Install PWA dependencies
      cd pwa
      npm install
      
      echo "‚úÖ PWA dependencies installed"

  # Step 5: Install Bambu Studio CLI
  - name: Install Bambu Studio CLI
    description: Install Bambu Studio CLI and system dependencies for 3D model slicing
    run: |
      # Make installation script executable
      chmod +x scripts/install-bambu-studio-cli.sh
      
      # Install Bambu Studio CLI with all dependencies
      scripts/install-bambu-studio-cli.sh
      
      echo "‚úÖ Bambu Studio CLI installed"

  # Step 6: Verify installations
  - name: Verify installations
    description: Run comprehensive validation of the development environment
    run: |
      echo "üß™ Validating development environment..."
      
      # Test Python environment
      echo "Testing Python environment..."
      python3 -c "import fastapi, uvicorn, pytest; print('‚úÖ Core Python packages available')"
      
      # Test linting tools
      echo "Testing Python linting tools..."
      python3 -c "import flake8, black, mypy, isort; print('‚úÖ Python linting tools available')"
      
      # Test Node.js environment
      echo "Testing Node.js environment..."
      cd pwa
      npm list react react-dom typescript vite > /dev/null 2>&1 && echo "‚úÖ Core PWA packages available"
      
      # Test Bambu Studio CLI (if available)
      echo "Testing Bambu Studio CLI..."
      if command -v bambu-studio-cli > /dev/null 2>&1; then
        echo "‚úÖ Bambu Studio CLI available in PATH"
        bambu-studio-cli --help > /dev/null 2>&1 && echo "‚úÖ CLI help command works"
      else
        echo "‚ö†Ô∏è  Bambu Studio CLI not in PATH (this is expected if installation failed)"
      fi
      
      echo "üéâ Development environment validation complete!"

  # Step 7: Setup virtual display for headless testing
  - name: Setup headless display
    description: Configure Xvfb for headless GUI testing (Linux environments)
    run: |
      # Install Xvfb if not available and we're on Linux
      if [ "$(uname)" = "Linux" ]; then
        # Check if Xvfb is available, install if needed
        if ! command -v Xvfb > /dev/null 2>&1; then
          echo "Installing Xvfb for headless testing..."
          if command -v apt-get > /dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y xvfb
          elif command -v yum > /dev/null 2>&1; then
            sudo yum install -y xorg-x11-server-Xvfb
          else
            echo "‚ö†Ô∏è  Could not install Xvfb automatically"
          fi
        fi
        
        # Start virtual display for testing
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "‚úÖ Virtual display configured"
      else
        echo "‚ÑπÔ∏è  Virtual display setup skipped (not Linux)"
      fi

  # Step 8: Environment summary
  - name: Environment summary
    description: Display setup summary and next steps
    run: |
      echo ""
      echo "üöÄ LANbu Handy Development Environment Ready!"
      echo "=============================================="
      echo ""
      echo "üì¶ Installed Components:"
      echo "  ‚Ä¢ Python $(python3 --version | cut -d' ' -f2) with FastAPI backend dependencies"
      echo "  ‚Ä¢ Node.js $(node --version) with React PWA dependencies"
      echo "  ‚Ä¢ Development tools: flake8, black, mypy, isort, ESLint, TypeScript"
      echo "  ‚Ä¢ Testing tools: pytest, Jest/Vitest ready"
      if command -v bambu-studio-cli > /dev/null 2>&1; then
        echo "  ‚Ä¢ Bambu Studio CLI for 3D model slicing"
      else
        echo "  ‚Ä¢ Bambu Studio CLI (installation may require system dependencies)"
      fi
      if [ "$(uname)" = "Linux" ]; then
        echo "  ‚Ä¢ Xvfb virtual display for headless testing"
      fi
      echo ""
      echo "üõ†Ô∏è  Quick Start Commands:"
      echo "  Backend development:"
      echo "    cd backend && uvicorn app.main:app --reload --host 0.0.0.0"
      echo "  PWA development:"
      echo "    cd pwa && npm run dev"
      echo "  Run tests:"
      echo "    cd backend && python -m pytest tests/ -v"
      echo "  Lint code:"
      echo "    python -m flake8 backend/ && cd pwa && npm run lint"
      echo ""
      echo "üìö See .devcontainer/README.md and scripts/README.md for more details"